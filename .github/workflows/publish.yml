on:
  push:
    tags:
      - "v*" # Push events on tags matching regular expression, i.e. v20.15.10

name: Publish Release
jobs:
  build:
    name: Build Release Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.200

      - name: Restore tools
        run: dotnet tool restore

      - name: Install dependencies
        run: dotnet restore

      - name: Build for publish
        run: dotnet build --configuration Release --no-restore -p:PackageVersion=${GITHUB_REF##*/v} -p:FileVersion=${GITHUB_REF##*/v} -p:InformationalVersion=${GITHUB_REF##*/v}

      # Package without rebuilding the binaries. TargetsForTfmSpecificContentInPackage is a workaround for a bug related to --no-build with fsharp projects.
      # See https://github.com/dotnet/fsharp/issues/12320
      - name: Dotnet Pack
        run: dotnet pack -c release -p:PackageVersion=${GITHUB_REF##*/v} -p:FileVersion=${GITHUB_REF##*/v} -p:InformationalVersion=${GITHUB_REF##*/v} --no-build --output nuget-packages -p:TargetsForTfmSpecificContentInPackage=
      # Sign the nuget package itself

      - name: Upload nuget packages
        uses: actions/upload-artifact@v3
        with:
          name: nuget-packages
          path: nuget-packages/
          retention-days: 1

  publish:
    name: Create Release
    runs-on: windows-latest
    environment: CD
    needs:
     - build
    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.200
      - name: Download nuget packages
        uses: actions/download-artifact@v3
        with:
          name: nuget-packages
          path: nuget-packages/

      - name: Sign nuget packages
        env:
          CERTIFICATE_HOST: ${{ secrets.CODE_SIGNING_CERT_HOST }}
          CERTIFICATE_HOST_API_KEY: ${{ secrets.CODE_SIGNING_CERT_HOST_API_KEY }}
          CERTIFICATE_SHA1_HASH: ${{ secrets.CODE_SIGNING_CERT_SHA1_HASH }}
          CLIENT_CERTIFICATE: ${{ secrets.CODE_SIGNING_CLIENT_CERT }}
          CLIENT_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CLIENT_CERT_PASSWORD }}
        uses: cognitedata/code-sign-action/@v2
        with:
          path-to-binary: 'nuget-packages/'

      - name: Push nuget packages
        run: dotnet nuget push nuget-packages/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }}
        continue-on-error: false

      - name: Create Release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
